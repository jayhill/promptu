using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.ComponentModel;
using ZachJohnson.Promptu.PluginModel.Internals;

namespace ZachJohnson.Promptu.PluginModel
{
    public class BoundObjectProperty<T> : ObjectProperty<T>
    {
        //private PropertyInfo propertyInfo;
        //private bool hasInitialized;
        private BindingExpression binding;
        private BindingContextManager bindingContextManager;
        //private object dataContext;
        private TypeConverter typeConverter;

        public BoundObjectProperty(
            string id,
            string label,
            string path,
            object dataContext)
            : this(
                id,
                label,  
                path, 
                dataContext, 
                null,
                null,
                null)
        {
        }

        public BoundObjectProperty(
            string id,
            string label, 
            string path, 
            object dataContext,
            IPropertyEditorFactory editorFactory,
            object conversionInfo,
            TypeConverter typeConverter)
            : base(id, label, editorFactory, conversionInfo)
        {
            if (path == null)
            {
                throw new ArgumentNullException("path");
            }
            else if (path.Length <= 0)
            {
                throw new ArgumentException("'path' cannot be empty.");
            }

            this.binding = new BindingExpression(path);
            this.bindingContextManager = new BindingContextManager(this.binding);
            this.bindingContextManager.PropertyChanged += this.HandleDataContextPropertyChanged;
            this.DataContext = dataContext;
            this.typeConverter = typeConverter;
            //this.dataContext = dataContext;

            //INotifyPropertyChanged notifyInterface = this.dataContext as INotifyPropertyChanged;

            //if (notifyInterface != null)
            //{
            //    notifyInterface.PropertyChanged += this.HandleDataContextPropertyChanged;
            //}
        }

        public object DataContext
        {
            get 
            { 
                return this.bindingContextManager.BaseContext; 
            }

            set
            {
               // lock (this)
                //{
                    this.bindingContextManager.BaseContext = value;
                    //object oldDataContext = this.dataContext;

                    //INotifyPropertyChanged notifyInterface;
                    //if (oldDataContext != null)
                    //{
                    //    notifyInterface = oldDataContext as INotifyPropertyChanged;

                    //    if (notifyInterface != null)
                    //    {
                    //        notifyInterface.PropertyChanged -= this.HandleDataContextPropertyChanged;
                    //    }
                    //}

                    //this.dataContext = value;
                    //notifyInterface = value as INotifyPropertyChanged;

                    //if (notifyInterface != null)
                    //{
                    //    notifyInterface.PropertyChanged += this.HandleDataContextPropertyChanged;
                    //}

                    //this.hasInitialized = false;
                    //this.propertyInfo = null;
                //}

                this.NotifyValueChanged();
            }
        }

        protected override T GetValueCore()
        {
            //lock (this)
            //{
                //if (this.dataContext == null)
                //{
                //    return default(T);
                //}

                //this.InitializeIfNecessary();

                //if (this.propertyInfo == null)
                //{
                //    return default(T);
                //}

            object value = this.binding.GetValue(this.bindingContextManager.BaseContext);

                try
                {
                    //object value = this.propertyInfo.GetValue(this.dataContext, null);

                    if (this.typeConverter != null)
                    {
                        return (T)this.typeConverter.ConvertTo(value, typeof(T));
                    }

                    return (T)value;
                }
                catch (ArgumentException)
                {
                }
                catch (NotSupportedException)
                {
                }
                catch (InvalidCastException)
                {
                }

                return default(T);
            //}
        }

        protected override void SetValueCore(T value)
        {
            //lock (this)
            //{
            //    if (this.dataContext == null)
            //    {
            //        return;
            //    }

            //    this.InitializeIfNecessary();

            //    if (this.propertyInfo == null)
            //    {
            //        return;
            //    }

            object setValue = value;

                try
                {
                    if (this.typeConverter != null)
                    {
                        setValue = this.typeConverter.ConvertFrom(value);
                    }
                }
                catch (ArgumentException)
                {
                }
                catch (NotSupportedException)
                {
                }
                catch (InvalidCastException)
                {
                }

                this.binding.SetValue(this.bindingContextManager.BaseContext, setValue);
            //}
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            this.bindingContextManager.Dispose();
        }

        //private void InitializeIfNecessary()
        //{
        //    if (!this.hasInitialized)
        //    {
        //        if (this.dataContext != null)
        //        {
        //            Type objectType = this.dataContext.GetType();
        //            try
        //            {
        //                this.propertyInfo = objectType.GetProperty(
        //                    this.path,
        //                    BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);
        //            }
        //            catch (AmbiguousMatchException)
        //            {
        //            }
        //        }

        //        this.hasInitialized = true;
        //    }
        //}

        private void HandleDataContextPropertyChanged(object sender, EventArgs e)
        {
            this.NotifyValueChanged();
        }
    }
}
