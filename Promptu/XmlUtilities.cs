using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Globalization;

namespace ZachJohnson.Promptu
{
    public static class XmlUtilities
    {
        internal static void AppendHeader(XmlDocument document)
        {
            XmlNode node;
            node = document.CreateProcessingInstruction("xml", "version=\"1.0\"");
            document.AppendChild(node);
            document.AppendChild(document.CreateComment("WARNING: Do not edit this file!"
            + "  Improper settings may result in undesired behavior and loss of information..."));
        }

        public static XmlNode CreateNode(string name, string innerText, XmlDocument document)
        {
            XmlNode node = document.CreateElement(name);
            node.InnerText = innerText;
            return node;
        }

        public static XmlNode CreateNode(string name, object innerTextValue, XmlDocument document)
        {
            return CreateNode(name, String.Format(CultureInfo.InvariantCulture, "{0}", innerTextValue), document);
        }

        public static XmlNode CreateNode(string name, XmlAttribute attribute, XmlDocument document)
        {
            XmlNode node = document.CreateElement(name);
            node.Attributes.Append(attribute);
            return node;
        }

        public static void AppendAttribute(XmlNode node, string name, object value)
        {
            if (node == null)
            {
                throw new ArgumentNullException("node");
            }

            node.Attributes.Append(CreateAttribute(name, value, node.OwnerDocument));
        }

        public static void AppendNode(XmlNode node, string name, object innerTextValue)
        {
            if (node == null)
            {
                throw new ArgumentNullException("node");
            }

            node.AppendChild(CreateNode(name, innerTextValue, node.OwnerDocument));
        }

        public static void AppendNode(XmlNode node, string name, XmlAttribute attribute)
        {
            if (node == null)
            {
                throw new ArgumentNullException("node");
            }

            node.AppendChild(CreateNode(name, attribute, node.OwnerDocument));
        }

        public static XmlAttribute CreateAttribute(string name, string value, XmlDocument document)
        {
            XmlAttribute attribute = document.CreateAttribute(name);
            attribute.Value = value;
            return attribute;
        }

        public static XmlAttribute CreateAttribute(string name, object value, XmlDocument document)
        {
            return CreateAttribute(name, String.Format(CultureInfo.InvariantCulture, "{0}", value), document);
        }
    }
}
