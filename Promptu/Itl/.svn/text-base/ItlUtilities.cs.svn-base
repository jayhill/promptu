//using System;
//using System.Collections.Generic;
//using System.Text;
//using ZachJohnson.Promptu.Itl.AbstractSyntaxTree;
//using ZachJohnson.Promptu.UserModel;
//using ZachJohnson.Promptu.UserModel.Collections;

//namespace ZachJohnson.Promptu.Itl
//{
//    internal static class ItlUtilities
//    {
//        //public static void ValidateFunctionsExist(Expression expression, ReturnValue? returnValue, FunctionCollectionComposite prioritizedFunctions, FeedbackCollection feedback)
//        //{
//        //    if (expression is ExpressionGroup)
//        //    {
//        //        foreach (Expression innerExpression in ((ExpressionGroup)expression).Expressions)
//        //        {
//        //            ValidateFunctionsExist(innerExpression, prioritizedFunctions, feedback);
//        //        }
//        //    }
//        //    else if (expression is FunctionCall)
//        //    {
//        //        FunctionCall functionCall = expression as FunctionCall;
//        //        if (!prioritizedFunctions.ContainsAnyNamed(functionCall.Identifier.Name, returnValue))
//        //        {
//        //            feedback.AddError(String.Format(Localization.MessageFormats.MissingStringFunction, functionCall.Identifier.Name));
//        //        }
//        //        else if (!prioritizedFunctions.Contains(functionCall.Identifier.Name, returnValue, functionCall.GetParameterSignature()))
//        //        {
//        //            if (functionCall.Parameters.Count == 1)
//        //            {
//        //                feedback.AddError(String.Format(Localization.MessageFormats.InvalidParameterCountSingular, functionCall.Identifier.Name, functionCall.Parameters.Count));
//        //            }
//        //            else
//        //            {
//        //                feedback.AddError(String.Format(Localization.MessageFormats.InvalidParameterCountPlural, functionCall.Identifier.Name, functionCall.Parameters.Count));
//        //            }
//        //        }

//        //        foreach (Expression innerExpression in functionCall.Parameters)
//        //        {
//        //            ValidateFunctionsExist(innerExpression, prioritizedFunctions, feedback);
//        //        }
//        //    }
//        //    else if (expression is OptionalSubsitution)
//        //    {
//        //        OptionalSubsitution substitution = expression as OptionalSubsitution;

//        //        if (substitution.DefaultValue != null)
//        //        {
//        //            ValidateFunctionsExist(substitution.DefaultValue, prioritizedFunctions, feedback);
//        //        }
//        //    }
//        //}
//    }
//}
