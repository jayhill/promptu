using System;
using System.Collections.Generic;
using System.Text;
using ZachJohnson.Promptu.UIModel.Interfaces;

namespace ZachJohnson.Promptu.PTK
{
    internal abstract class TabWidgetBase<TPage, TTabPage> : GenericWidget<ITabControl>, IEnumerable<TPage> 
        where TPage : TabPageBase<TPage, TTabPage> 
        where TTabPage : ITabPage
    {
        private List<TPage> pages = new List<TPage>();

        internal TabWidgetBase(string id, ITabControl nativeInterface)
            : base(id, nativeInterface)
        {
            this.NativeInterface.SelectedTabChanged += this.RaiseSelectedTabChanged;
        }

        public event EventHandler<TabPageEventArgs<TPage, TTabPage>> TabPageAdded;

        public event EventHandler<TabPageEventArgs<TPage, TTabPage>> TabPageRemoved;

        public event EventHandler SelectedTabChanged;

        public int PageCount
        {
            get { return this.pages.Count; }
        }

        public TPage SelectedTab
        {
            get
            {
                if (this.NativeInterface.SelectedTabIndex >= 0)
                {
                    return this.pages[this.NativeInterface.SelectedTabIndex];
                }

                return null;
            }

            set
            {
                this.NativeInterface.SelectedTabIndex = this.pages.IndexOf(value);
            }
        }

        public int SelectedIndex
        {
            get { return this.NativeInterface.SelectedTabIndex; }
            set { this.NativeInterface.SelectedTabIndex = value; }
        }

        public void Add(TPage tabPage)
        {
            if (tabPage == null)
            {
                throw new ArgumentNullException("tabPage");
            }

            this.Insert(this.PageCount, tabPage);
        }

        public void Insert(int index, TPage tabPage)
        {
            if (tabPage == null)
            {
                throw new ArgumentNullException("tabPage");
            }
            else if (index < 0 || index > this.PageCount)
            {
                throw new ArgumentOutOfRangeException("index");
            }

            if (tabPage.CurrentOwner != null)
            {
                tabPage.CurrentOwner.Remove(tabPage);
            }

            this.NativeInterface.Insert(index, tabPage.NativeInterface);
            this.pages.Insert(index, tabPage);
            tabPage.CurrentOwner = this;
            this.OnTabPageAdded(new TabPageEventArgs<TPage, TTabPage>(tabPage));
        }

        //private void InsertNextTo(string id, TabPage item, int offset)
        //{
        //    if (id == null)
        //    {
        //        throw new ArgumentNullException("id");
        //    }
        //    else if (item == null)
        //    {
        //        throw new ArgumentNullException("item");
        //    }

        //    for (int i = 0; i < this.Count; i++)
        //    {
        //        if (this[i].Id == id)
        //        {
        //            if (isInternal)
        //            {
        //                this.InsertInternal(i + offset, item);
        //            }
        //            else
        //            {
        //                this.Insert(i + offset, item);
        //            }
        //        }
        //    }
        //}

        public void Remove(TPage tabPage)
        {
            if (tabPage == null)
            {
                throw new ArgumentNullException("tabPage");
            }

            if (tabPage.CurrentOwner == this)
            {
                this.pages.Remove(tabPage);
                this.NativeInterface.Remove(tabPage.NativeInterface);
                tabPage.CurrentOwner = null;
                this.OnTabPageRemoved(new TabPageEventArgs<TPage, TTabPage>(tabPage));
            }
        }

        public void RaiseSelectedTabChanged(object sender, EventArgs e)
        {
            this.OnSelectedTabChanged(EventArgs.Empty);
        }

        protected virtual void OnTabPageAdded(TabPageEventArgs<TPage, TTabPage> e)
        {
            EventHandler<TabPageEventArgs<TPage, TTabPage>> handler = this.TabPageAdded;
            if (handler != null)
            {
                handler(this, e);
            }
        }

        protected virtual void OnTabPageRemoved(TabPageEventArgs<TPage, TTabPage> e)
        {
            EventHandler<TabPageEventArgs<TPage, TTabPage>> handler = this.TabPageRemoved;
            if (handler != null)
            {
                handler(this, e);
            }
        }

        protected virtual void OnSelectedTabChanged(EventArgs e)
        {
            EventHandler handler = this.SelectedTabChanged;
            if (handler != null)
            {
                handler(this, e);
            }
        }

        public IEnumerator<TPage> GetEnumerator()
        {
            return this.pages.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
}
